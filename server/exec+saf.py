import re
import logging
from rich.console import Console

console = Console()

# Setup logging for security audits
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("security.log"), logging.StreamHandler()]
)

def is_safe_command(command: str) -> bool:
    """
    Validates that the AI-generated command does not contain unsafe operations.
    
    Args:
        command (str): The shell command generated by AI.

    Returns:
        bool: True if safe, False if it contains dangerous operations.
    """
    
    # Define patterns of unsafe commands (using regex for better detection)
    forbidden_patterns = [
        r"\brm\s+-rf\b",        # Recursive delete (rm -rf)
        r"\b:\(\)\s*{\s*:|:\s*};:\b",  # Fork bomb
        r"\bdd\s+if=\b",        # Disk overwrite (dd)
        r"\bmkfs\b",            # File system format (mkfs)
        r"\bshutdown\b",        # System shutdown
        r"\breboot\b",          # System reboot
        r"\bhistory\s*-c\b",    # Clears shell history (to hide actions)
        r"\bkill\s+-9\s+1\b"    # Force kill all processes
    ]

    # Check for dangerous patterns
    for pattern in forbidden_patterns:
        if re.search(pattern, command, re.IGNORECASE):
            console.print(f"ðŸš¨ [red]Blocked Unsafe Command:[/red] {command}")
            logging.warning(f"Blocked command attempt: {command}")
            return False

    return True
